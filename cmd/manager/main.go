package main

import (
	"context"
	"flag"
	"fmt"
	"github.com/go-logr/logr"
	hoflags "github.com/operator-framework/operator-sdk/pkg/helm/flags"
	"github.com/operator-framework/operator-sdk/pkg/helm/release"
	"github.com/oracle/coherence-operator/pkg/flags"
	"github.com/oracle/coherence-operator/pkg/net"
	cohrest "github.com/oracle/coherence-operator/pkg/rest"
	"os"
	"runtime"
	"strings"

	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/types"
	// Import all Kubernetes client auth plugins (e.g. Azure, GCP, OIDC, etc.)
	_ "k8s.io/client-go/plugin/pkg/client/auth"
	"k8s.io/client-go/rest"

	"github.com/oracle/coherence-operator/pkg/apis"
	"github.com/oracle/coherence-operator/pkg/controller"

	helmctl "github.com/operator-framework/operator-sdk/pkg/helm/controller"
	"github.com/operator-framework/operator-sdk/pkg/helm/watches"
	"github.com/operator-framework/operator-sdk/pkg/k8sutil"
	kubemetrics "github.com/operator-framework/operator-sdk/pkg/kube-metrics"
	"github.com/operator-framework/operator-sdk/pkg/leader"
	"github.com/operator-framework/operator-sdk/pkg/log/zap"
	"github.com/operator-framework/operator-sdk/pkg/restmapper"
	sdkVersion "github.com/operator-framework/operator-sdk/version"
	"github.com/spf13/pflag"
	"sigs.k8s.io/controller-runtime/pkg/client/config"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	logf "sigs.k8s.io/controller-runtime/pkg/runtime/log"
	"sigs.k8s.io/controller-runtime/pkg/runtime/signals"
)

// NOTE: This file was generated by the Operator-SDK and then edited to add extra functionality for the Coherence Operator.
// Upgrading from one version of the Operator-SDK to another may require this file to be re-genrated (or rather the code
// in this file will need to be edited. To make this easier comment blocks have been added to make it obvious where tius
// file was changed from the original generated file.

// >>>>>>>> Coherence Operator code added to Operator SDK the generated file ---------------------------
const (
	// configName is the name of the internal Coherence Operator configuration.
	configName = "coherence-monitoring-config"
)

// BuildInfo is a pipe delimited string of build information injected by the Go linker at build time.
var BuildInfo string

// <<<<<<<< Coherence Operator code added to Operator SDK the generated file ---------------------------

// Change below variables to serve metrics on different host or port.
var (
	metricsHost               = "0.0.0.0"
	metricsPort         int32 = 8383
	operatorMetricsPort int32 = 8686
)

var log = logf.Log.WithName("cmd")

func printVersion() {
	log.Info(fmt.Sprintf("Go Version: %s", runtime.Version()))
	log.Info(fmt.Sprintf("Go OS/Arch: %s/%s", runtime.GOOS, runtime.GOARCH))
	log.Info(fmt.Sprintf("Version of operator-sdk: %v", sdkVersion.Version))
}

func main() {
	// Add the zap logger flag set to the CLI. The flag set must
	// be added before calling pflag.Parse().
	pflag.CommandLine.AddFlagSet(zap.FlagSet())

	// Add flags registered by imported packages (e.g. glog and
	// controller-runtime)
	pflag.CommandLine.AddGoFlagSet(flag.CommandLine)

	// >>>>>>>> Coherence Operator code added to Operator SDK the generated file ---------------------------
	// create Coherence Operator flags
	cohf := flags.AddTo(pflag.CommandLine)

	// create Helm Operator flags
	hflags := hoflags.AddTo(pflag.CommandLine)
	fmt.Println(hflags)
	// <<<<<<<< Coherence Operator code added to Operator SDK the generated file ---------------------------

	pflag.Parse()

	// Use a zap logr.Logger implementation. If none of the zap
	// flags are configured (or if the zap flag set is not being
	// used), this defaults to a production zap logger.
	//
	// The logger instantiated here can be changed to any logger
	// implementing the logr.Logger interface. This logger will
	// be propagated through the whole operator, generating
	// uniform and structured logs.
	logf.SetLogger(zap.Logger())

	// >>>>>>>> Coherence Operator code added to Operator SDK the generated file ---------------------------
	printBuildInfo(log)
	// <<<<<<<< Coherence Operator code added to Operator SDK the generated file ---------------------------
	printVersion()

	namespace, err := k8sutil.GetWatchNamespace()
	if err != nil {
		log.Error(err, "failed to get watch namespace")
		os.Exit(1)
	}

	// Get a config to talk to the apiserver
	cfg, err := config.GetConfig()
	if err != nil {
		log.Error(err, "")
		os.Exit(1)
	}

	ctx := context.TODO()
	// Become the leader before proceeding
	err = leader.Become(ctx, "coherence-operator-lock")
	if err != nil {
		log.Error(err, "")
		os.Exit(1)
	}

	// Create a new Cmd to provide shared dependencies and start components
	mgr, err := manager.New(cfg, manager.Options{
		Namespace:          namespace,
		MapperProvider:     restmapper.NewDynamicRESTMapper,
		MetricsBindAddress: fmt.Sprintf("%s:%d", metricsHost, metricsPort),
	})
	if err != nil {
		log.Error(err, "")
		os.Exit(1)
	}

	log.Info("Registering Components.")

	// Setup Scheme for all resources
	if err := apis.AddToScheme(mgr.GetScheme()); err != nil {
		log.Error(err, "")
		os.Exit(1)
	}

	// Setup all Controllers
	if err := controller.AddToManager(mgr); err != nil {
		log.Error(err, "")
		os.Exit(1)
	}

	// >>>>>>>> Coherence Operator code added to Operator SDK the generated file ---------------------------

	// ensure that the configuration secret exists
	err = ensureOperatorConfig(namespace, mgr, cohf)

	// Configure the Helm operator
	if err := setupHelm(mgr, namespace, hflags); err != nil {
		log.Error(err, "Manager exited non-zero")
		os.Exit(1)
	}

	// Start the Operator ReST endpoint
	cohrest.StartRestServer(mgr, cohf.RestHost, cohf.RestPort)

	// <<<<<<<< Coherence Operator code added to Operator SDK the generated file ---------------------------

	if err = serveCRMetrics(cfg); err != nil {
		log.Info("Could not generate and serve custom resource metrics", "error", err.Error())
	}

	// >>>>>>>> Coherence Operator code added to Operator SDK the generated file ---------------------------
	// We do not want to add a service here so the gernated code is commented out.

	//// Add to the below struct any other metrics ports you want to expose.
	//servicePorts := []v1.ServicePort{
	//	{Port: metricsPort, Name: metrics.OperatorPortName, Protocol: v1.ProtocolTCP, TargetPort: intstr.IntOrString{TypeIs: intstr.Int, IntVal: metricsPort}},
	//	{Port: operatorMetricsPort, Name: metrics.CRPortName, Protocol: v1.ProtocolTCP, TargetPort: intstr.IntOrString{TypeIs: intstr.Int, IntVal: operatorMetricsPort}},
	//}
	//// Create Service object to expose the metrics port(s).
	//_, err = metrics.CreateMetricsService(ctx, cfg, servicePorts)
	//if err != nil {
	//	log.Info(err.Error())
	//}
	// <<<<<<<< Coherence Operator code added to Operator SDK the generated file ---------------------------

	log.Info("Starting the Cmd.")

	// Start the Cmd
	if err := mgr.Start(signals.SetupSignalHandler()); err != nil {
		log.Error(err, "Manager exited non-zero")
		os.Exit(1)
	}
}

// serveCRMetrics gets the Operator/CustomResource GVKs and generates metrics based on those types.
// It serves those metrics on "http://metricsHost:operatorMetricsPort".
func serveCRMetrics(cfg *rest.Config) error {
	// Below function returns filtered operator/CustomResource specific GVKs.
	// For more control override the below GVK list with your own custom logic.
	filteredGVK, err := k8sutil.GetGVKsFromAddToScheme(apis.AddToScheme)
	if err != nil {
		return err
	}
	// Get the namespace the operator is currently deployed in.
	operatorNs, err := k8sutil.GetOperatorNamespace()
	if err != nil {
		return err
	}
	// To generate metrics in other namespaces, add the values below.
	ns := []string{operatorNs}
	// Generate and serve custom resource specific metrics.
	err = kubemetrics.GenerateAndServeCRMetrics(cfg, ns, filteredGVK, metricsHost, operatorMetricsPort)
	if err != nil {
		return err
	}
	return nil
}

// >>>>>>>> Coherence Operator code added to Operator SDK the generated file ---------------------------

func setupHelm(mgr manager.Manager, namespace string, hflags *hoflags.HelmOperatorFlags) error {
	// Setup Helm controller
	watchList, err := watches.Load(hflags.WatchesFile)
	if err != nil {
		log.Error(err, "failed to load Helm watches")
		return err
	}

	fmt.Println(watchList)
	for _, w := range watchList {
		fmt.Println(w)
		err := helmctl.Add(mgr, helmctl.WatchOptions{
			Namespace:               namespace,
			GVK:                     w.GroupVersionKind,
			ManagerFactory:          release.NewManagerFactory(mgr, w.ChartDir),
			ReconcilePeriod:         hflags.ReconcilePeriod,
			WatchDependentResources: w.WatchDependentResources,
		})
		if err != nil {
			log.Error(err, "failed to add Helm watche")
			return err
		}
	}

	return nil
}

// PrintBuildInfo prints the Coherence Operator build information to the log.
func printBuildInfo(log logr.Logger) {
	var (
		version string
		commit  string
		date    string
	)

	if BuildInfo != "" {
		parts := strings.Split(BuildInfo, "|")

		if len(parts) > 0 {
			version = parts[0]
		}

		if len(parts) > 1 {
			commit = parts[1]
		}

		if len(parts) > 2 {
			date = strings.Replace(parts[2], ".", " ", -1)
		}
	}

	log.Info(fmt.Sprintf("Coherence Operator Version: %s", version))
	log.Info(fmt.Sprintf("Coherence Operator Git commit: %s", commit))
	log.Info(fmt.Sprintf("Coherence Operator Build Time: %s", date))
}

// ensureOperatorConfig ensures that the Operator configuration secret exists in the namespace.
func ensureOperatorConfig(namespace string, mgr manager.Manager, flags *flags.CoherenceOperatorFlags) error {
	log.Info("Ensuring configuration secret")

	client := mgr.GetClient()

	err := client.Get(context.TODO(), types.NamespacedName{Name: configName, Namespace: namespace}, &v1.Secret{})
	if err != nil && !errors.IsNotFound(err) {
		return err
	}

	var service string
	var port int32

	if flags.ServiceName != "" {
		// use the service name if it was specifically set
		service = flags.ServiceName
	} else if flags.RestHost != "0.0.0.0" {
		// if no service name was set but ReST is bound to a specific address then use that
		service = flags.RestHost
	} else {
		// ReST is bound to 0.0.0.0 so use any of our local addresses.
		// This does not guarantee we're reachable but would be OK in local testing
		ip, err := net.GetLocalAddress()
		if err == nil && ip != nil {
			service = fmt.Sprint(ip.String())
		}
	}

	if flags.ServicePort != -1 {
		port = flags.ServicePort
	} else {
		port = flags.RestPort
	}

	hostAndPort := fmt.Sprintf("%s:%d", service, port)
	log.Info("Operator Configuration: 'operatorhost' value set to " + hostAndPort)

	secret := &v1.Secret{}
	secret.SetNamespace(namespace)
	secret.SetName(configName)
	secret.StringData = make(map[string]string)
	secret.StringData["operatorhost"] = hostAndPort

	if flags.LogIntegrationEnabled {
		secret.StringData["elasticsearchhost"] = flags.ElasticSearchHost
		secret.StringData["elasticsearchport"] = fmt.Sprintf("%d", flags.ElasticSearchPort)
		secret.StringData["elasticsearchuser"] = flags.ElasticSearchUser
		secret.StringData["elasticsearchpassword"] = flags.ElasticSearchHost
	}

	if errors.IsNotFound(err) {
		// for some reason we're getting here even if the secret exists!!
		err = client.Delete(context.TODO(), secret)
		if err != nil {
			return err
		}
		err = client.Create(context.TODO(), secret)
	} else {
		err = client.Update(context.TODO(), secret)
	}

	return err
}
