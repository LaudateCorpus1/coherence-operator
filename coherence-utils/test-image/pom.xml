<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
    Licensed under the Universal Permissive License v 1.0 as shown at
    http://oss.oracle.com/licenses/upl.

-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.oracle.coherence.kubernetes</groupId>
    <artifactId>operator-parent</artifactId>
    <version>2.0.0-SNAPSHOT</version>
  </parent>

  <artifactId>coherence-operator-test-image</artifactId>

  <description>Oracle Coherence Kubernetes Operator Test Image</description>
  <name>coherence-operator-testimage</name>

  <properties>
    <operator.test.image>${test.image.prefix}operator-test-image</operator.test.image>

    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.oracle.coherence</groupId>
      <artifactId>coherence</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>io.helidon.webserver</groupId>
      <artifactId>helidon-webserver</artifactId>
      <version>1.2.0</version>
    </dependency>
  </dependencies>

  <build>
    <!-- Use the assembly plugin to pull together the files to use to build the
         docker image under the target/docker folder -->
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>docker</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <finalName>docker</finalName>
              <appendAssemblyId>false</appendAssemblyId>
              <descriptors>
                <descriptor>src/assembly/image-assembly.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <!-- Build the custom test Docker image -->
          <execution>
            <id>docker-build</id>
            <phase>package</phase>
            <configuration>
              <executable>docker</executable>
              <workingDirectory>${project.build.directory}/docker</workingDirectory>
              <arguments>
                <argument>build</argument>
                <argument>-f</argument>
                <argument>Dockerfile</argument>
                <argument>-t</argument>
                <argument>${operator.test.image}:${project.version}</argument>
                <argument>.</argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <!-- This profile will push the Docker images built by this module to the registry.
         This is required when building against a k8s cluster that cannot see the local
         registry on the build machine. -->
    <profile>
      <id>push-test-image</id>
      <build>
        <plugins>
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>push-image</id>
                <phase>pre-integration-test</phase>
                <configuration>
                  <executable>docker</executable>
                  <workingDirectory>${project.build.directory}/docker</workingDirectory>
                  <arguments>
                    <argument>push</argument>
                    <argument>${operator.test.image}:${project.version}</argument>
                  </arguments>
                </configuration>
                <goals>
                  <goal>exec</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
