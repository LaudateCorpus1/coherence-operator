apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: coherenceinternals.coherence.oracle.com
spec:
  group: coherence.oracle.com
  names:
    kind: CoherenceInternal
    listKind: CoherenceInternalList
    plural: coherenceinternals
    singular: coherenceinternal
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
          type: object
        spec:
          description: Spec contains the specification for a Coherence cluster. The
            format is the same as the values file for the Coherence Helm chart.
          properties:
            affinity:
              description: 'Affinity controls Pod scheduling preferences.   ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity'
              type: object
            cluster:
              description: The name of the cluster
              type: string
            clusterSize:
              description: The size of the cluster
              format: int32
              type: integer
            coherence:
              description: The Coherence Docker image settings
              properties:
                image:
                  description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images'
                  type: string
                imagePullPolicy:
                  description: 'Image pull policy. One of Always, Never, IfNotPresent.
                    More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
                  type: string
              type: object
            coherenceUtils:
              description: The Coherence Utilities Docker image settings
              properties:
                image:
                  description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images'
                  type: string
                imagePullPolicy:
                  description: 'Image pull policy. One of Always, Never, IfNotPresent.
                    More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
                  type: string
              type: object
            fluentd:
              description: Specify the fluentd image These parameters are ignored
                if 'LogCaptureEnabled' is false.
              properties:
                application:
                  description: The fluentd application configuration
                  properties:
                    configFile:
                      description: The fluentd configuration file configuring source
                        for application log.
                      type: string
                    tag:
                      description: This value should be source.tag from fluentd.application.configFile.
                      type: string
                  type: object
                image:
                  description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images'
                  type: string
                imagePullPolicy:
                  description: 'Image pull policy. One of Always, Never, IfNotPresent.
                    More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
                  type: string
              type: object
            fullnameOverride:
              type: string
            imagePullSecrets:
              description: 'The secrets to be used when pulling images. Secrets must
                be manually created in the target namespace. ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/'
              items:
                type: string
              type: array
            logCaptureEnabled:
              description: Controls whether or not log capture via EFK stack is enabled.
              type: boolean
            nodeSelector:
              additionalProperties:
                type: string
              description: 'NodeSelector is the Node labels for pod assignment   ref:
                https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector'
              type: object
            resources:
              description: 'Resources is the optional resource requests and limits
                for the containers  ref: http://kubernetes.io/docs/user-guide/compute-resources/  By
                default the cpu requests is set to zero and the cpu limit set to 32.
                This is because it appears that K8s defaults cpu to one and since
                Java 10 the JVM now correctly picks up cgroup cpu limits then the
                JVM will only see one cpu. By setting resources.requests.cpu=0 and
                resources.limits.cpu=32 it ensures that the JVM will see the either
                the number of cpus on the host if this is <= 32 or the JVM will see
                32 cpus if the host has > 32 cpus. The limit is set to zero so that
                there is no hard-limit applied.  No default memory limits are applied.'
              type: object
            role:
              description: The role name of a Coherence cluster member
              type: string
            serviceAccountName:
              description: The name to use for the service account to use when RBAC
                is enabled The role bindings must already have been created as this
                chart does not create them it just sets the serviceAccountName value
                in the Pod spec.
              type: string
            store:
              description: The store settings
              properties:
                annotations:
                  additionalProperties:
                    type: string
                  description: 'Annotations are free-form yaml that will be added
                    to the store release as annotations Any annotations should be
                    placed BELOW this annotations: key. For example if we wanted to
                    include annotations for Prometheus it would look like this:  annotations:   prometheus.io/scrape:
                    "true"   prometheus.io/port: "2408"'
                  type: object
                cacheConfig:
                  description: CacheConfig is the name of the cache configuration
                    file to use
                  type: string
                env:
                  additionalProperties:
                    type: string
                  description: 'Env is additional environment variable mappings that
                    will be passed to the Coherence container in the Pod To specify
                    extra variables add them as name value pairs the same as they
                    would be added to a Pod containers spec, for example these values:  env:   FOO:
                    "foo-value"   BAR: "bar-value"  will add the environment variable
                    mappings FOO="foo-value" and BAR="bar-value"'
                  type: object
                javaOpts:
                  description: JavaOpts is miscellaneous JVM options to pass to the
                    Coherence store container This options will override the system
                    options computed in the start up script.
                  type: string
                jmx:
                  description: JMX defines the values used to enable and configure
                    a separate set of cluster members   that will act as MBean server
                    members and expose a JMX port via a dedicated service.   The JMX
                    port exposed will be using the JMXMP transport as RMI does not
                    work properly in containers.
                  properties:
                    enabled:
                      description: Enabled enables or disables running the MBean server
                        nodes.   If not set the default is false.
                      type: boolean
                    maxHeap:
                      description: MaxHeap is the min/max heap value to pass to the
                        MBean server JVM.   The format should be the same as that
                        used for Java's -Xms and -Xmx JVM options.   If not set the
                        JVM defaults are used.
                      type: string
                    replicas:
                      description: Replicas is the number of MBean server nodes to
                        run.   If not set the default is one.
                      format: int32
                      type: integer
                    service:
                      description: Service groups the values used to configure the
                        management service The default service external port is 9099.
                      properties:
                        annotations:
                          additionalProperties:
                            type: string
                          description: Annotations is free form yaml that will be
                            added to the service annotations
                          type: object
                        enabled:
                          description: Enabled controls whether to create the service
                            yaml or not
                          type: boolean
                        externalName:
                          description: externalName is the external reference that
                            kubedns or equivalent will return as a CNAME record for
                            this service. No proxying will be involved. Must be a
                            valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123)
                            and requires Type to be ExternalName.
                          type: string
                        externalTrafficPolicy:
                          description: externalTrafficPolicy denotes if this Service
                            desires to route external traffic to node-local or cluster-wide
                            endpoints. "Local" preserves the client source IP and
                            avoids a second hop for LoadBalancer and Nodeport type
                            services, but risks potentially imbalanced traffic spreading.
                            "Cluster" obscures the client source IP and may cause
                            a second hop to another node, but should have good overall
                            load-spreading.
                          type: string
                        healthCheckNodePort:
                          description: healthCheckNodePort specifies the healthcheck
                            nodePort for the service. If not specified, HealthCheckNodePort
                            is created by the service api backend with the allocated
                            nodePort. Will use user-specified nodePort value if specified
                            by the client. Only effects when Type is set to LoadBalancer
                            and ExternalTrafficPolicy is set to Local.
                          format: int32
                          type: integer
                        loadBalancerIP:
                          description: LoadBalancerIP is the IP address of the load
                            balancer
                          type: string
                        loadBalancerSourceRanges:
                          description: 'If specified and supported by the platform,
                            this will restrict traffic through the cloud-provider
                            load-balancer will be restricted to the specified client
                            IPs. This field will be ignored if the cloud-provider
                            does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                          items:
                            type: string
                          type: array
                        name:
                          description: An optional name to use to override the generated
                            service name.
                          type: string
                        port:
                          description: The service port value
                          format: int32
                          type: integer
                        publishNotReadyAddresses:
                          description: publishNotReadyAddresses, when set to true,
                            indicates that DNS implementations must publish the notReadyAddresses
                            of subsets for the Endpoints associated with the Service.
                            The default value is false. The primary use case for setting
                            this field is to use a StatefulSet's Headless Service
                            to propagate SRV records for its Pods without respect
                            to their readiness for purpose of peer discovery.
                          type: boolean
                        sessionAffinity:
                          description: 'Supports "ClientIP" and "None". Used to maintain
                            session affinity. Enable client IP based session affinity.
                            Must be ClientIP or None. Defaults to None. More info:
                            https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                          type: string
                        sessionAffinityConfig:
                          description: sessionAffinityConfig contains the configurations
                            of session affinity.
                          type: object
                        type:
                          description: Type is the K8s service type (typically ClusterIP
                            or LoadBalancer) The default is "ClusterIP".
                          type: string
                      type: object
                  type: object
                jvmArgs:
                  description: JvmArgs specifies the options to pass to the Coherence
                    JVM. The default is to use the G1 collector.
                  type: string
                labels:
                  additionalProperties:
                    type: string
                  description: 'The extra labels to add to the Coherence Pod. More
                    info: http://kubernetes.io/docs/user-guide/labels'
                  type: object
                logging:
                  description: Logging allows configuration of Coherence and java
                    util logging.
                  properties:
                    configFile:
                      description: 'ConfigFile allows the location of the Java util
                        logging configuration file to be overridden.  If this value
                        is not set the logging.properties file embedded in this chart
                        will be used.  If this value is set the configuration will
                        be located by trying the following locations in order:    1.
                        If store.logging.configMapName is set then the config map
                        will be mounted as a volume and the logging         properties
                        file will be located as a file location relative to the ConfigMap
                        volume mount point.    2. If userArtifacts.imageName is set
                        then using this value as a file name relative to the location
                        of the         configuration files directory in the user artifacts
                        image.    3. Using this value as an absolute file name.'
                      type: string
                    configMapName:
                      description: ConfigMapName allows a config map to be mounted
                        as a volume containing the logging  configuration file to
                        use.
                      type: string
                    level:
                      description: The default being 5 (info level).
                      format: int32
                      type: integer
                  type: object
                main:
                  description: Main allows specification of Coherence container main
                    class.
                  properties:
                    arguments:
                      description: Arguments is the optional arguments for Coherence
                        container main class.
                      type: string
                    class:
                      description: Class is the Coherence container main class.  The
                        default value is   com.tangosol.net.DefaultCacheServer.
                      type: string
                  type: object
                management:
                  description: 'Management configures Coherence management over REST   Note:
                    Coherence management over REST will be available in 12.2.1.4.'
                  properties:
                    port:
                      description: Port specifies the port used.
                      format: int32
                      type: integer
                    protocol:
                      description: Protocol for container port. Must be UDP or TCP.
                        Defaults to "TCP"
                      type: string
                    service:
                      description: Service specifies the service used to expose the
                        port.
                      properties:
                        annotations:
                          additionalProperties:
                            type: string
                          description: Annotations is free form yaml that will be
                            added to the service annotations
                          type: object
                        enabled:
                          description: Enabled controls whether to create the service
                            yaml or not
                          type: boolean
                        externalName:
                          description: externalName is the external reference that
                            kubedns or equivalent will return as a CNAME record for
                            this service. No proxying will be involved. Must be a
                            valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123)
                            and requires Type to be ExternalName.
                          type: string
                        externalTrafficPolicy:
                          description: externalTrafficPolicy denotes if this Service
                            desires to route external traffic to node-local or cluster-wide
                            endpoints. "Local" preserves the client source IP and
                            avoids a second hop for LoadBalancer and Nodeport type
                            services, but risks potentially imbalanced traffic spreading.
                            "Cluster" obscures the client source IP and may cause
                            a second hop to another node, but should have good overall
                            load-spreading.
                          type: string
                        healthCheckNodePort:
                          description: healthCheckNodePort specifies the healthcheck
                            nodePort for the service. If not specified, HealthCheckNodePort
                            is created by the service api backend with the allocated
                            nodePort. Will use user-specified nodePort value if specified
                            by the client. Only effects when Type is set to LoadBalancer
                            and ExternalTrafficPolicy is set to Local.
                          format: int32
                          type: integer
                        loadBalancerIP:
                          description: LoadBalancerIP is the IP address of the load
                            balancer
                          type: string
                        loadBalancerSourceRanges:
                          description: 'If specified and supported by the platform,
                            this will restrict traffic through the cloud-provider
                            load-balancer will be restricted to the specified client
                            IPs. This field will be ignored if the cloud-provider
                            does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                          items:
                            type: string
                          type: array
                        name:
                          description: An optional name to use to override the generated
                            service name.
                          type: string
                        port:
                          description: The service port value
                          format: int32
                          type: integer
                        publishNotReadyAddresses:
                          description: publishNotReadyAddresses, when set to true,
                            indicates that DNS implementations must publish the notReadyAddresses
                            of subsets for the Endpoints associated with the Service.
                            The default value is false. The primary use case for setting
                            this field is to use a StatefulSet's Headless Service
                            to propagate SRV records for its Pods without respect
                            to their readiness for purpose of peer discovery.
                          type: boolean
                        sessionAffinity:
                          description: 'Supports "ClientIP" and "None". Used to maintain
                            session affinity. Enable client IP based session affinity.
                            Must be ClientIP or None. Defaults to None. More info:
                            https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                          type: string
                        sessionAffinityConfig:
                          description: sessionAffinityConfig contains the configurations
                            of session affinity.
                          type: object
                        type:
                          description: Type is the K8s service type (typically ClusterIP
                            or LoadBalancer) The default is "ClusterIP".
                          type: string
                      type: object
                    ssl:
                      description: SSL configures SSL settings for a Coherence component
                      properties:
                        enabled:
                          description: Enabled is a boolean flag indicating whether
                            enables or disables SSL on the Coherence management over
                            REST endpoint, the default is false (disabled).
                          type: boolean
                        keyPasswordFile:
                          description: KeyStorePasswordFile is the name of the file
                            in the k8s secret containing the key   password when configuring
                            component over REST to use SSL.
                          type: string
                        keyStore:
                          description: Keystore is the name of the Java key store
                            file in the k8s secret to use as the SSL keystore   when
                            configuring component over REST to use SSL.
                          type: string
                        keyStoreAlgorithm:
                          description: KeyStoreAlgorithm is the name of the keystore
                            algorithm for the keystore in the k8s secret   used when
                            configuring component over REST to use SSL. If not set
                            the default is SunX509
                          type: string
                        keyStorePasswordFile:
                          description: KeyStorePasswordFile is the name of the file
                            in the k8s secret containing the keystore   password when
                            configuring component over REST to use SSL.
                          type: string
                        keyStoreProvider:
                          description: KeyStoreProvider is the name of the keystore
                            provider for the keystore in the k8s secret   used when
                            configuring component over REST to use SSL.
                          type: string
                        keyStoreType:
                          description: KeyStoreType is the name of the Java keystore
                            type for the keystore in the k8s secret used   when configuring
                            component over REST to use SSL. If not set the default
                            is JKS.
                          type: string
                        requireClientCert:
                          description: RequireClientCert is a boolean flag indicating
                            whether the client certificate will be   authenticated
                            by the server (two-way SSL) when configuring component
                            over REST to use SSL.   If not set the default is false
                          type: boolean
                        secrets:
                          description: Secrets is the name of the k8s secrets containing
                            the Java key stores and password files.   This value MUST
                            be provided if SSL is enabled on the Coherence management
                            over ReST endpoint.
                          type: string
                        trustStore:
                          description: TrustStore is the name of the Java trust store
                            file in the k8s secret to use as the SSL   trust store
                            when configuring component over REST to use SSL.
                          type: string
                        trustStoreAlgorithm:
                          description: TrustStoreAlgorithm is the name of the keystore
                            algorithm for the trust store in the k8s   secret used
                            when configuring component over REST to use SSL.  If not
                            set the default is SunX509.
                          type: string
                        trustStorePasswordFile:
                          description: TrustStorePasswordFile is the name of the file
                            in the k8s secret containing the trust store   password
                            when configuring component over REST to use SSL.
                          type: string
                        trustStoreProvider:
                          description: TrustStoreProvider is the name of the keystore
                            provider for the trust store in the k8s   secret used
                            when configuring component over REST to use SSL.
                          type: string
                        trustStoreType:
                          description: TrustStoreType is the name of the Java keystore
                            type for the trust store in the k8s secret   used when
                            configuring component over REST to use SSL. If not set
                            the default is JKS.
                          type: string
                      required:
                      - keyStore
                      type: object
                  type: object
                maxHeap:
                  description: MaxHeap is the min/max heap value to pass to the JVM.
                    The format should be the same as that used for Java's -Xms and
                    -Xmx JVM options. If not set the JVM defaults are used.
                  type: string
                metrics:
                  description: 'Metrics configures Coherence metrics publishing   Note:
                    Coherence metrics publishing will be available in 12.2.1.4.'
                  properties:
                    port:
                      description: Port specifies the port used.
                      format: int32
                      type: integer
                    protocol:
                      description: Protocol for container port. Must be UDP or TCP.
                        Defaults to "TCP"
                      type: string
                    service:
                      description: Service specifies the service used to expose the
                        port.
                      properties:
                        annotations:
                          additionalProperties:
                            type: string
                          description: Annotations is free form yaml that will be
                            added to the service annotations
                          type: object
                        enabled:
                          description: Enabled controls whether to create the service
                            yaml or not
                          type: boolean
                        externalName:
                          description: externalName is the external reference that
                            kubedns or equivalent will return as a CNAME record for
                            this service. No proxying will be involved. Must be a
                            valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123)
                            and requires Type to be ExternalName.
                          type: string
                        externalTrafficPolicy:
                          description: externalTrafficPolicy denotes if this Service
                            desires to route external traffic to node-local or cluster-wide
                            endpoints. "Local" preserves the client source IP and
                            avoids a second hop for LoadBalancer and Nodeport type
                            services, but risks potentially imbalanced traffic spreading.
                            "Cluster" obscures the client source IP and may cause
                            a second hop to another node, but should have good overall
                            load-spreading.
                          type: string
                        healthCheckNodePort:
                          description: healthCheckNodePort specifies the healthcheck
                            nodePort for the service. If not specified, HealthCheckNodePort
                            is created by the service api backend with the allocated
                            nodePort. Will use user-specified nodePort value if specified
                            by the client. Only effects when Type is set to LoadBalancer
                            and ExternalTrafficPolicy is set to Local.
                          format: int32
                          type: integer
                        loadBalancerIP:
                          description: LoadBalancerIP is the IP address of the load
                            balancer
                          type: string
                        loadBalancerSourceRanges:
                          description: 'If specified and supported by the platform,
                            this will restrict traffic through the cloud-provider
                            load-balancer will be restricted to the specified client
                            IPs. This field will be ignored if the cloud-provider
                            does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                          items:
                            type: string
                          type: array
                        name:
                          description: An optional name to use to override the generated
                            service name.
                          type: string
                        port:
                          description: The service port value
                          format: int32
                          type: integer
                        publishNotReadyAddresses:
                          description: publishNotReadyAddresses, when set to true,
                            indicates that DNS implementations must publish the notReadyAddresses
                            of subsets for the Endpoints associated with the Service.
                            The default value is false. The primary use case for setting
                            this field is to use a StatefulSet's Headless Service
                            to propagate SRV records for its Pods without respect
                            to their readiness for purpose of peer discovery.
                          type: boolean
                        sessionAffinity:
                          description: 'Supports "ClientIP" and "None". Used to maintain
                            session affinity. Enable client IP based session affinity.
                            Must be ClientIP or None. Defaults to None. More info:
                            https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                          type: string
                        sessionAffinityConfig:
                          description: sessionAffinityConfig contains the configurations
                            of session affinity.
                          type: object
                        type:
                          description: Type is the K8s service type (typically ClusterIP
                            or LoadBalancer) The default is "ClusterIP".
                          type: string
                      type: object
                    ssl:
                      description: SSL configures SSL settings for a Coherence component
                      properties:
                        enabled:
                          description: Enabled is a boolean flag indicating whether
                            enables or disables SSL on the Coherence management over
                            REST endpoint, the default is false (disabled).
                          type: boolean
                        keyPasswordFile:
                          description: KeyStorePasswordFile is the name of the file
                            in the k8s secret containing the key   password when configuring
                            component over REST to use SSL.
                          type: string
                        keyStore:
                          description: Keystore is the name of the Java key store
                            file in the k8s secret to use as the SSL keystore   when
                            configuring component over REST to use SSL.
                          type: string
                        keyStoreAlgorithm:
                          description: KeyStoreAlgorithm is the name of the keystore
                            algorithm for the keystore in the k8s secret   used when
                            configuring component over REST to use SSL. If not set
                            the default is SunX509
                          type: string
                        keyStorePasswordFile:
                          description: KeyStorePasswordFile is the name of the file
                            in the k8s secret containing the keystore   password when
                            configuring component over REST to use SSL.
                          type: string
                        keyStoreProvider:
                          description: KeyStoreProvider is the name of the keystore
                            provider for the keystore in the k8s secret   used when
                            configuring component over REST to use SSL.
                          type: string
                        keyStoreType:
                          description: KeyStoreType is the name of the Java keystore
                            type for the keystore in the k8s secret used   when configuring
                            component over REST to use SSL. If not set the default
                            is JKS.
                          type: string
                        requireClientCert:
                          description: RequireClientCert is a boolean flag indicating
                            whether the client certificate will be   authenticated
                            by the server (two-way SSL) when configuring component
                            over REST to use SSL.   If not set the default is false
                          type: boolean
                        secrets:
                          description: Secrets is the name of the k8s secrets containing
                            the Java key stores and password files.   This value MUST
                            be provided if SSL is enabled on the Coherence management
                            over ReST endpoint.
                          type: string
                        trustStore:
                          description: TrustStore is the name of the Java trust store
                            file in the k8s secret to use as the SSL   trust store
                            when configuring component over REST to use SSL.
                          type: string
                        trustStoreAlgorithm:
                          description: TrustStoreAlgorithm is the name of the keystore
                            algorithm for the trust store in the k8s   secret used
                            when configuring component over REST to use SSL.  If not
                            set the default is SunX509.
                          type: string
                        trustStorePasswordFile:
                          description: TrustStorePasswordFile is the name of the file
                            in the k8s secret containing the trust store   password
                            when configuring component over REST to use SSL.
                          type: string
                        trustStoreProvider:
                          description: TrustStoreProvider is the name of the keystore
                            provider for the trust store in the k8s   secret used
                            when configuring component over REST to use SSL.
                          type: string
                        trustStoreType:
                          description: TrustStoreType is the name of the Java keystore
                            type for the trust store in the k8s secret   used when
                            configuring component over REST to use SSL. If not set
                            the default is JKS.
                          type: string
                      required:
                      - keyStore
                      type: object
                  type: object
                overrideConfig:
                  description: OverrideConfig is name of the Coherence operational
                    configuration override file, the default is tangosol-coherence-override.xml
                  type: string
                persistence:
                  description: Persistence values configure the on-disc data persistence
                    settings. The bool Enabled enables or disabled on disc persistence
                    of data.
                  properties:
                    enabled:
                      type: boolean
                    persistentVolumeClaim:
                      description: PersistentVolumeClaim allows the configuration
                        of a normal k8s persistent volume claim for persistence data.
                      type: object
                    volume:
                      description: Volume allows the configuration of a normal k8s
                        volume mapping for persistence data instead of a persistent
                        volume claim. If a value is defined for store.persistence.volume
                        then no PVC will be created and persistence data will instead
                        be written to this volume. It is up to the deployer to understand
                        the consequences of this and how the guarantees given when
                        using PVCs differ to the storage guarantees for the particular
                        volume type configured here.
                      type: object
                  type: object
                podManagementPolicy:
                  description: PodManagementPolicy sets the podManagementPolicy value
                    for the Coherence cluster StatefulSet.  The default value is Parallel,
                    to cause Pods to be started and stopped in parallel, which can
                    be useful for faster cluster start-up in certain scenarios such
                    as testing but could cause data loss if multiple Pods are stopped
                    in parallel.  This can be changed to OrderedReady which causes
                    Pods to start and stop in sequence.
                  type: string
                pofConfig:
                  description: PofConfig is the name of the POF configuration file
                    to use when using POF serializer
                  type: string
                ports:
                  description: Ports specifies additional port mappings for the Pod
                    and additional Services for those ports
                  items:
                    properties:
                      name:
                        description: Name specifies the name of th port.
                        type: string
                      port:
                        description: Port specifies the port used.
                        format: int32
                        type: integer
                      protocol:
                        description: Protocol for container port. Must be UDP or TCP.
                          Defaults to "TCP"
                        type: string
                      service:
                        description: Service specifies the service used to expose
                          the port.
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: Annotations is free form yaml that will be
                              added to the service annotations
                            type: object
                          enabled:
                            description: Enabled controls whether to create the service
                              yaml or not
                            type: boolean
                          externalName:
                            description: externalName is the external reference that
                              kubedns or equivalent will return as a CNAME record
                              for this service. No proxying will be involved. Must
                              be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123)
                              and requires Type to be ExternalName.
                            type: string
                          externalTrafficPolicy:
                            description: externalTrafficPolicy denotes if this Service
                              desires to route external traffic to node-local or cluster-wide
                              endpoints. "Local" preserves the client source IP and
                              avoids a second hop for LoadBalancer and Nodeport type
                              services, but risks potentially imbalanced traffic spreading.
                              "Cluster" obscures the client source IP and may cause
                              a second hop to another node, but should have good overall
                              load-spreading.
                            type: string
                          healthCheckNodePort:
                            description: healthCheckNodePort specifies the healthcheck
                              nodePort for the service. If not specified, HealthCheckNodePort
                              is created by the service api backend with the allocated
                              nodePort. Will use user-specified nodePort value if
                              specified by the client. Only effects when Type is set
                              to LoadBalancer and ExternalTrafficPolicy is set to
                              Local.
                            format: int32
                            type: integer
                          loadBalancerIP:
                            description: LoadBalancerIP is the IP address of the load
                              balancer
                            type: string
                          loadBalancerSourceRanges:
                            description: 'If specified and supported by the platform,
                              this will restrict traffic through the cloud-provider
                              load-balancer will be restricted to the specified client
                              IPs. This field will be ignored if the cloud-provider
                              does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                            items:
                              type: string
                            type: array
                          name:
                            description: An optional name to use to override the generated
                              service name.
                            type: string
                          port:
                            description: The service port value
                            format: int32
                            type: integer
                          publishNotReadyAddresses:
                            description: publishNotReadyAddresses, when set to true,
                              indicates that DNS implementations must publish the
                              notReadyAddresses of subsets for the Endpoints associated
                              with the Service. The default value is false. The primary
                              use case for setting this field is to use a StatefulSet's
                              Headless Service to propagate SRV records for its Pods
                              without respect to their readiness for purpose of peer
                              discovery.
                            type: boolean
                          sessionAffinity:
                            description: 'Supports "ClientIP" and "None". Used to
                              maintain session affinity. Enable client IP based session
                              affinity. Must be ClientIP or None. Defaults to None.
                              More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                            type: string
                          sessionAffinityConfig:
                            description: sessionAffinityConfig contains the configurations
                              of session affinity.
                            type: object
                          type:
                            description: Type is the K8s service type (typically ClusterIP
                              or LoadBalancer) The default is "ClusterIP".
                            type: string
                        type: object
                    type: object
                  type: array
                readinessProbe:
                  description: 'The readiness probe config. ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/'
                  properties:
                    failureThreshold:
                      description: Minimum consecutive failures for the probe to be
                        considered failed after having succeeded.
                      format: int32
                      type: integer
                    initialDelaySeconds:
                      description: 'Number of seconds after the container has started
                        before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                      format: int32
                      type: integer
                    periodSeconds:
                      description: How often (in seconds) to perform the probe.
                      format: int32
                      type: integer
                    successThreshold:
                      description: Minimum consecutive successes for the probe to
                        be considered successful after having failed.
                      format: int32
                      type: integer
                    timeoutSeconds:
                      description: 'Number of seconds after which the probe times
                        out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
                      format: int32
                      type: integer
                  type: object
                revisionHistoryLimit:
                  description: RevisionHistoryLimit is the number of deployment revision
                    K8s keeps after rolling upgrades. The default value if not set
                    is 3.
                  format: int32
                  type: integer
                snapshot:
                  description: Snapshot values configure the on-disc persistence data
                    snapshot (backup) settings. The bool Enabled enables or disabled
                    a different location for persistence snapshot data. If set to
                    false then snapshot files will be written to the same volume configured
                    for persistence data in the Persistence section.
                  properties:
                    enabled:
                      type: boolean
                    persistentVolumeClaim:
                      description: PersistentVolumeClaim allows the configuration
                        of a normal k8s persistent volume claim for persistence data.
                      type: object
                    volume:
                      description: Volume allows the configuration of a normal k8s
                        volume mapping for persistence data instead of a persistent
                        volume claim. If a value is defined for store.persistence.volume
                        then no PVC will be created and persistence data will instead
                        be written to this volume. It is up to the deployer to understand
                        the consequences of this and how the guarantees given when
                        using PVCs differ to the storage guarantees for the particular
                        volume type configured here.
                      type: object
                  type: object
                storageEnabled:
                  description: A boolean flag indicating whether members of this role
                    are storage enabled. If not specified the default value is true.
                  type: boolean
                volumeClaimTemplates:
                  description: VolumeClaimTemplates defines extra PVC mappings that
                    will be added to the Coherence Pod.   The content of this yaml
                    should match the normal k8s volumeClaimTemplates section of a
                    Pod definition   as described in https://kubernetes.io/docs/concepts/storage/persistent-volumes/
                  items:
                    type: object
                  type: array
                volumeMounts:
                  description: VolumeMounts defines extra volume mounts to map to
                    the additional volumes or PVCs declared above   in store.volumes
                    and store.volumeClaimTemplates
                  items:
                    type: object
                  type: array
                volumes:
                  description: Volumes defines extra volume mappings that will be
                    added to the Coherence Pod.   The content of this yaml should
                    match the normal k8s volumes section of a Pod definition   as
                    described in https://kubernetes.io/docs/concepts/storage/volumes/
                  items:
                    type: object
                  type: array
                wka:
                  description: The name of the headless service used for Coherence
                    WKA
                  type: string
              type: object
            tolerations:
              description: 'Tolerations is for nodes that have taints on them.   Useful
                if you want to dedicate nodes to just run the coherence container
                For example:   tolerations:   - key: "key"     operator: "Equal"     value:
                "value"     effect: "NoSchedule"    ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/'
              items:
                type: object
              type: array
            userArtifacts:
              description: The user artifacts image settings
              properties:
                configDir:
                  description: The folder in the custom artifacts Docker image containing
                    configuration files to be added to the classpath of the Coherence
                    container. If not set the configDir is "/files/conf".
                  type: string
                image:
                  description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images'
                  type: string
                imagePullPolicy:
                  description: 'Image pull policy. One of Always, Never, IfNotPresent.
                    More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
                  type: string
                libDir:
                  description: The folder in the custom artifacts Docker image containing
                    jar files to be added to the classpath of the Coherence container.
                    If not set the libDir is "/files/lib".
                  type: string
              type: object
          required:
          - cluster
          type: object
        status:
          type: object
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
