<doc-view>

<h2 id="_high_level_design">High Level Design</h2>
<div class="section">
<p>The Coherence Operator has been built using the <a id="" title="" target="_blank" href="https://github.com/operator-framework/operator-sdk">Operator SDK</a> and
hence the design is based on how the framework works.</p>


<h3 id="_custom_resource_definitions_crds">Custom Resource Definitions (CRDs)</h3>
<div class="section">
<p>In Kubernetes a CRD is a yaml (or json) file that defines the structure of a custom resource. When building operators
using the Operator SDK the yaml files are not edited directly, they are generated from the Go structs in the source code.
The Coherence Operator has three CRDs:</p>

<ul class="ulist">
<li>
<p>CoherenceCluster</p>

</li>
<li>
<p>CoherenceRole</p>

</li>
<li>
<p>CoherenceInternal</p>

</li>
</ul>

<h4 id="_coherencecluster_crd">CoherenceCluster CRD</h4>
<div class="section">
<p>The CoherenceCluster CRD is the main CRD that defines what a Coherence cluster looks like. This is the CRD that a customer
creates and manges through the normal kubernetes commands and APIs. A CoherenceCluster is made up of one or more roles.
Each role defines a sub-set of the members of a Coherence cluster (or all of the members in the case of a cluster with a
single role).</p>

<p>The yaml for the CoherenceCluster CRD is in the file <code>deploy/crds/coherence.oracle.com_coherenceclusters_crd.yaml</code>. This yaml
is generated by the Operator SDK from the <code>CoherenceCluster</code> struct in the <code>pkg/apis/coherence/v1/coherencecluster_types.go</code>
source file.</p>

</div>

<h4 id="_coherencerole_crd">CoherenceRole CRD</h4>
<div class="section">
<p>The CoherenceRole CRD is a definition of a role within a CoherenceCluster. A role is a sub-set of the members of a
cluster that all share the same configuration. A customer should not interact directly with a CoherenceRole other
than when scaling (for example using <code>kubectl scale</code> commands).</p>

<p>The reason that a cluster is split into roles represented by a different CRD is to allow more fine grained control over
different parts of the cluster, especially for operations such as scaling. By having a separate CRD for a role allows
a customer to update or scale each role individually.</p>

<p>The yaml for the CoherenceRole CRD is in the file <code>deploy/crds/coherence.oracle.com_coherenceroles_crd.yaml</code>. This yaml
is generated by the Operator SDK from the <code>CoherenceRole</code> struct in the <code>pkg/apis/coherence/v1/coherencerole_types.go</code>
source file.</p>

</div>
</div>

<h3 id="_modifying_crds">Modifying CRDs</h3>
<div class="section">
<p>To modify the contents of a CRD (for example to add a new field) the corresponding Go struct needs to be updated.
For backwards compatibility between released versions we should ensure that we do not delete fields. After any of the
structs have been modified the new CRD files need to be generated, this is done by running the Operator SDK generator
using the Makefile. If the generate step is not run the code will not work properly.</p>

<markup
lang="bash"

>make generate</markup>

</div>
</div>
</doc-view>
