// +build !

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/coherence/v1.CoherenceCluster":           schema_pkg_apis_coherence_v1_CoherenceCluster(ref),
		"./pkg/apis/coherence/v1.CoherenceClusterSpec":       schema_pkg_apis_coherence_v1_CoherenceClusterSpec(ref),
		"./pkg/apis/coherence/v1.CoherenceClusterStatus":     schema_pkg_apis_coherence_v1_CoherenceClusterStatus(ref),
		"./pkg/apis/coherence/v1.CoherenceInternal":          schema_pkg_apis_coherence_v1_CoherenceInternal(ref),
		"./pkg/apis/coherence/v1.CoherenceInternalSpec":      schema_pkg_apis_coherence_v1_CoherenceInternalSpec(ref),
		"./pkg/apis/coherence/v1.CoherenceInternalStatus":    schema_pkg_apis_coherence_v1_CoherenceInternalStatus(ref),
		"./pkg/apis/coherence/v1.CoherenceInternalStoreSpec": schema_pkg_apis_coherence_v1_CoherenceInternalStoreSpec(ref),
		"./pkg/apis/coherence/v1.CoherenceRole":              schema_pkg_apis_coherence_v1_CoherenceRole(ref),
		"./pkg/apis/coherence/v1.CoherenceRoleSpec":          schema_pkg_apis_coherence_v1_CoherenceRoleSpec(ref),
		"./pkg/apis/coherence/v1.CoherenceRoleStatus":        schema_pkg_apis_coherence_v1_CoherenceRoleStatus(ref),
		"./pkg/apis/coherence/v1.FluentdApplicationSpec":     schema_pkg_apis_coherence_v1_FluentdApplicationSpec(ref),
		"./pkg/apis/coherence/v1.FluentdImageSpec":           schema_pkg_apis_coherence_v1_FluentdImageSpec(ref),
		"./pkg/apis/coherence/v1.ImageSpec":                  schema_pkg_apis_coherence_v1_ImageSpec(ref),
		"./pkg/apis/coherence/v1.Images":                     schema_pkg_apis_coherence_v1_Images(ref),
		"./pkg/apis/coherence/v1.JMXSpec":                    schema_pkg_apis_coherence_v1_JMXSpec(ref),
		"./pkg/apis/coherence/v1.LoggingSpec":                schema_pkg_apis_coherence_v1_LoggingSpec(ref),
		"./pkg/apis/coherence/v1.MainSpec":                   schema_pkg_apis_coherence_v1_MainSpec(ref),
		"./pkg/apis/coherence/v1.NamedPortSpec":              schema_pkg_apis_coherence_v1_NamedPortSpec(ref),
		"./pkg/apis/coherence/v1.PersistentStorageSpec":      schema_pkg_apis_coherence_v1_PersistentStorageSpec(ref),
		"./pkg/apis/coherence/v1.PortSpec":                   schema_pkg_apis_coherence_v1_PortSpec(ref),
		"./pkg/apis/coherence/v1.PortSpecWithSSL":            schema_pkg_apis_coherence_v1_PortSpecWithSSL(ref),
		"./pkg/apis/coherence/v1.ReadinessProbeSpec":         schema_pkg_apis_coherence_v1_ReadinessProbeSpec(ref),
		"./pkg/apis/coherence/v1.SSLSpec":                    schema_pkg_apis_coherence_v1_SSLSpec(ref),
		"./pkg/apis/coherence/v1.ServiceSpec":                schema_pkg_apis_coherence_v1_ServiceSpec(ref),
		"./pkg/apis/coherence/v1.StatusHAHandler":            schema_pkg_apis_coherence_v1_StatusHAHandler(ref),
		"./pkg/apis/coherence/v1.UserArtifactsImageSpec":     schema_pkg_apis_coherence_v1_UserArtifactsImageSpec(ref),
	}
}

func schema_pkg_apis_coherence_v1_CoherenceCluster(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CoherenceCluster is the Schema for the coherenceclusters API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/coherence/v1.CoherenceClusterSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/coherence/v1.CoherenceClusterStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.CoherenceClusterSpec", "./pkg/apis/coherence/v1.CoherenceClusterStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_coherence_v1_CoherenceClusterSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CoherenceClusterSpec defines the desired state of CoherenceCluster",
				Properties: map[string]spec.Schema{
					"imagePullSecrets": {
						SchemaProps: spec.SchemaProps{
							Description: "The secrets to be used when pulling images. Secrets must be manually created in the target namespace. ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"serviceAccountName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name to use for the service account to use when RBAC is enabled The role bindings must already have been created as this chart does not create them it just sets the serviceAccountName value in the Pod spec.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of this role. This value will be used to set the Coherence role property for all members of this role",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The desired number of cluster members of this role. This is a pointer to distinguish between explicit zero and not specified. Default value is 3.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"images": {
						SchemaProps: spec.SchemaProps{
							Description: "Details of the Docker images used in the role",
							Ref:         ref("./pkg/apis/coherence/v1.Images"),
						},
					},
					"storageEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "A boolean flag indicating whether members of this role are storage enabled. This value will set the corresponding coherence.distributed.localstorage System property. If not specified the default value is true. This flag is also used to configure the ScalingPolicy value if a value is not specified. If the StorageEnabled field is not specified or is true the scaling will be safe, if StorageEnabled is set to false scaling will be parallel.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"scalingPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "ScalingPolicy describes how the replicas of the cluster role will be scaled. The default if not specified is based upon the value of the StorageEnabled field. If StorageEnabled field is not specified or is true the default scaling will be safe, if StorageEnabled is set to false the default scaling will be parallel.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readinessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "The readiness probe config to be used for the Pods in this role. ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/",
							Ref:         ref("./pkg/apis/coherence/v1.ReadinessProbeSpec"),
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "The extra labels to add to the all of the Pods in this roles. Labels here will add to or override those defined for the cluster. More info: http://kubernetes.io/docs/user-guide/labels",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"cacheConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "CacheConfig is the name of the cache configuration file to use",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pofConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "PofConfig is the name of the POF configuration file to use when using POF serializer",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"overrideConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "OverrideConfig is name of the Coherence operational configuration override file, the default is tangosol-coherence-override.xml",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logging": {
						SchemaProps: spec.SchemaProps{
							Description: "Logging allows configuration of Coherence and java util logging.",
							Ref:         ref("./pkg/apis/coherence/v1.LoggingSpec"),
						},
					},
					"main": {
						SchemaProps: spec.SchemaProps{
							Description: "Main allows specification of Coherence container main class.",
							Ref:         ref("./pkg/apis/coherence/v1.MainSpec"),
						},
					},
					"maxHeap": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxHeap is the min/max heap value to pass to the JVM. The format should be the same as that used for Java's -Xms and -Xmx JVM options. If not set the JVM defaults are used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"jvmArgs": {
						SchemaProps: spec.SchemaProps{
							Description: "JvmArgs specifies the options to pass to the Coherence JVM. The default is to use the G1 collector.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"javaOpts": {
						SchemaProps: spec.SchemaProps{
							Description: "JavaOpts is miscellaneous JVM options to pass to the Coherence store container This options will override the system options computed in the start up script.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Ports specifies additional port mappings for the Pod and additional Services for those ports",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/coherence/v1.NamedPortSpec"),
									},
								},
							},
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Env is additional environment variable mappings that will be passed to the Coherence container in the Pod To specify extra variables add them as name value pairs the same as they would be added to a Pod containers spec, for example these values:\n\nenv:\n  FOO: \"foo-value\"\n  BAR: \"bar-value\"\n\nwill add the environment variable mappings FOO=\"foo-value\" and BAR=\"bar-value\"",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations are free-form yaml that will be added to the store release as annotations Any annotations should be placed BELOW this annotations: key. For example if we wanted to include annotations for Prometheus it would look like this:\n\nannotations:\n  prometheus.io/scrape: \"true\"\n  prometheus.io/port: \"2408\"",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"podManagementPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "PodManagementPolicy sets the podManagementPolicy value for the Coherence cluster StatefulSet.  The default value is Parallel, to cause Pods to be started and stopped in parallel, which can be useful for faster cluster start-up in certain scenarios such as testing but could cause data loss if multiple Pods are stopped in parallel.  This can be changed to OrderedReady which causes Pods to start and stop in sequence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"revisionHistoryLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "RevisionHistoryLimit is the number of deployment revision K8s keeps after rolling upgrades. The default value if not set is 3.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"persistence": {
						SchemaProps: spec.SchemaProps{
							Description: "Persistence values configure the on-disc data persistence settings. The bool Enabled enables or disabled on disc persistence of data.",
							Ref:         ref("./pkg/apis/coherence/v1.PersistentStorageSpec"),
						},
					},
					"snapshot": {
						SchemaProps: spec.SchemaProps{
							Description: "Snapshot values configure the on-disc persistence data snapshot (backup) settings. The bool Enabled enables or disabled a different location for persistence snapshot data. If set to false then snapshot files will be written to the same volume configured for persistence data in the Persistence section.",
							Ref:         ref("./pkg/apis/coherence/v1.PersistentStorageSpec"),
						},
					},
					"management": {
						SchemaProps: spec.SchemaProps{
							Description: "Management configures Coherence management over REST\n  Note: Coherence management over REST will be available in 12.2.1.4.",
							Ref:         ref("./pkg/apis/coherence/v1.PortSpecWithSSL"),
						},
					},
					"metrics": {
						SchemaProps: spec.SchemaProps{
							Description: "Metrics configures Coherence metrics publishing\n  Note: Coherence metrics publishing will be available in 12.2.1.4.",
							Ref:         ref("./pkg/apis/coherence/v1.PortSpecWithSSL"),
						},
					},
					"jmx": {
						SchemaProps: spec.SchemaProps{
							Description: "JMX defines the values used to enable and configure a separate set of cluster members\n  that will act as MBean server members and expose a JMX port via a dedicated service.\n  The JMX port exposed will be using the JMXMP transport as RMI does not work properly in containers.",
							Ref:         ref("./pkg/apis/coherence/v1.JMXSpec"),
						},
					},
					"volumes": {
						SchemaProps: spec.SchemaProps{
							Description: "Volumes defines extra volume mappings that will be added to the Coherence Pod.\n  The content of this yaml should match the normal k8s volumes section of a Pod definition\n  as described in https://kubernetes.io/docs/concepts/storage/volumes/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"volumeClaimTemplates": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeClaimTemplates defines extra PVC mappings that will be added to the Coherence Pod.\n  The content of this yaml should match the normal k8s volumeClaimTemplates section of a Pod definition\n  as described in https://kubernetes.io/docs/concepts/storage/persistent-volumes/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.PersistentVolumeClaim"),
									},
								},
							},
						},
					},
					"volumeMounts": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeMounts defines extra volume mounts to map to the additional volumes or PVCs declared above\n  in store.volumes and store.volumeClaimTemplates",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Description: "Pod scheduling values: Affinity, NodeSelector, Tolerations Affinity controls Pod scheduling preferences.\n  ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity",
							Ref:         ref("k8s.io/api/core/v1.Affinity"),
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is the Node labels for pod assignment\n  ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"tolerations": {
						SchemaProps: spec.SchemaProps{
							Description: "Tolerations is for nodes that have taints on them.\n  Useful if you want to dedicate nodes to just run the coherence container\nFor example:\n  tolerations:\n  - key: \"key\"\n    operator: \"Equal\"\n    value: \"value\"\n    effect: \"NoSchedule\"\n\n  ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources is the optional resource requests and limits for the containers\n ref: http://kubernetes.io/docs/user-guide/compute-resources/\n\nBy default the cpu requests is set to zero and the cpu limit set to 32. This is because it appears that K8s defaults cpu to one and since Java 10 the JVM now correctly picks up cgroup cpu limits then the JVM will only see one cpu. By setting resources.requests.cpu=0 and resources.limits.cpu=32 it ensures that the JVM will see the either the number of cpus on the host if this is <= 32 or the JVM will see 32 cpus if the host has > 32 cpus. The limit is set to zero so that there is no hard-limit applied.\n\nNo default memory limits are applied.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"statusHA": {
						SchemaProps: spec.SchemaProps{
							Description: "The handler to use to determine whether a role is Status HA. If not set the default handler will be used. In most use-cases the default handler would suffice but in advanced use-cases where the application code has a different concept of Status HA to just checking Coherence services then a different handler may be specified.",
							Ref:         ref("./pkg/apis/coherence/v1.StatusHAHandler"),
						},
					},
					"curlTimeout": {
						SchemaProps: spec.SchemaProps{
							Description: "The timeout in seconds used by curl when requesting site and rack info.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"roles": {
						SchemaProps: spec.SchemaProps{
							Description: "Roles is the list of different roles in the cluster There must be at least one role in a cluster.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/coherence/v1.CoherenceRoleSpec"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.CoherenceRoleSpec", "./pkg/apis/coherence/v1.Images", "./pkg/apis/coherence/v1.JMXSpec", "./pkg/apis/coherence/v1.LoggingSpec", "./pkg/apis/coherence/v1.MainSpec", "./pkg/apis/coherence/v1.NamedPortSpec", "./pkg/apis/coherence/v1.PersistentStorageSpec", "./pkg/apis/coherence/v1.PortSpecWithSSL", "./pkg/apis/coherence/v1.ReadinessProbeSpec", "./pkg/apis/coherence/v1.StatusHAHandler", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.PersistentVolumeClaim", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Toleration", "k8s.io/api/core/v1.Volume", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema_pkg_apis_coherence_v1_CoherenceClusterStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CoherenceClusterStatus defines the observed state of CoherenceCluster",
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_coherence_v1_CoherenceInternal(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CoherenceInternal is the Schema for the coherenceinternal API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec contains the specification for a Coherence cluster. The format is the same as the values file for the Coherence Helm chart.",
							Ref:         ref("./pkg/apis/coherence/v1.CoherenceInternalSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/coherence/v1.CoherenceInternalStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.CoherenceInternalSpec", "./pkg/apis/coherence/v1.CoherenceInternalStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_coherence_v1_CoherenceInternalSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CoherenceInternalSpec defines the desired state of CoherenceInternal",
				Properties: map[string]spec.Schema{
					"fullnameOverride": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"clusterSize": {
						SchemaProps: spec.SchemaProps{
							Description: "The size of the cluster",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"cluster": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Description: "The role name of a Coherence cluster member",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceAccountName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name to use for the service account to use when RBAC is enabled The role bindings must already have been created as this chart does not create them it just sets the serviceAccountName value in the Pod spec.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullSecrets": {
						SchemaProps: spec.SchemaProps{
							Description: "The secrets to be used when pulling images. Secrets must be manually created in the target namespace. ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"coherence": {
						SchemaProps: spec.SchemaProps{
							Description: "The Coherence Docker image settings",
							Ref:         ref("./pkg/apis/coherence/v1.ImageSpec"),
						},
					},
					"coherenceUtils": {
						SchemaProps: spec.SchemaProps{
							Description: "The Coherence Utilities Docker image settings",
							Ref:         ref("./pkg/apis/coherence/v1.ImageSpec"),
						},
					},
					"store": {
						SchemaProps: spec.SchemaProps{
							Description: "The store settings",
							Ref:         ref("./pkg/apis/coherence/v1.CoherenceInternalStoreSpec"),
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Description: "Affinity controls Pod scheduling preferences.\n  ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity",
							Ref:         ref("k8s.io/api/core/v1.Affinity"),
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is the Node labels for pod assignment\n  ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"tolerations": {
						SchemaProps: spec.SchemaProps{
							Description: "Tolerations is for nodes that have taints on them.\n  Useful if you want to dedicate nodes to just run the coherence container\nFor example:\n  tolerations:\n  - key: \"key\"\n    operator: \"Equal\"\n    value: \"value\"\n    effect: \"NoSchedule\"\n\n  ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources is the optional resource requests and limits for the containers\n ref: http://kubernetes.io/docs/user-guide/compute-resources/\n\nBy default the cpu requests is set to zero and the cpu limit set to 32. This is because it appears that K8s defaults cpu to one and since Java 10 the JVM now correctly picks up cgroup cpu limits then the JVM will only see one cpu. By setting resources.requests.cpu=0 and resources.limits.cpu=32 it ensures that the JVM will see the either the number of cpus on the host if this is <= 32 or the JVM will see 32 cpus if the host has > 32 cpus. The limit is set to zero so that there is no hard-limit applied.\n\nNo default memory limits are applied.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"fluentd": {
						SchemaProps: spec.SchemaProps{
							Description: "Specify the fluentd image",
							Ref:         ref("./pkg/apis/coherence/v1.FluentdImageSpec"),
						},
					},
					"userArtifacts": {
						SchemaProps: spec.SchemaProps{
							Description: "The user artifacts image settings",
							Ref:         ref("./pkg/apis/coherence/v1.UserArtifactsImageSpec"),
						},
					},
				},
				Required: []string{"cluster"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.CoherenceInternalStoreSpec", "./pkg/apis/coherence/v1.FluentdImageSpec", "./pkg/apis/coherence/v1.ImageSpec", "./pkg/apis/coherence/v1.UserArtifactsImageSpec", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Toleration"},
	}
}

func schema_pkg_apis_coherence_v1_CoherenceInternalStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CoherenceInternalStatus defines the observed state of CoherenceInternal",
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_coherence_v1_CoherenceInternalStoreSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CoherenceInternalStoreSpec defines the desired state of CoherenceInternal stores",
				Properties: map[string]spec.Schema{
					"storageEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "A boolean flag indicating whether members of this role are storage enabled. If not specified the default value is true.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"wka": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the headless service used for Coherence WKA",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "The extra labels to add to the Coherence Pod. More info: http://kubernetes.io/docs/user-guide/labels",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"readinessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "The readiness probe config. ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/",
							Ref:         ref("./pkg/apis/coherence/v1.ReadinessProbeSpec"),
						},
					},
					"cacheConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "CacheConfig is the name of the cache configuration file to use",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pofConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "PofConfig is the name of the POF configuration file to use when using POF serializer",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"overrideConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "OverrideConfig is name of the Coherence operational configuration override file, the default is tangosol-coherence-override.xml",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logging": {
						SchemaProps: spec.SchemaProps{
							Description: "Logging allows configuration of Coherence and java util logging.",
							Ref:         ref("./pkg/apis/coherence/v1.LoggingSpec"),
						},
					},
					"main": {
						SchemaProps: spec.SchemaProps{
							Description: "Main allows specification of Coherence container main class.",
							Ref:         ref("./pkg/apis/coherence/v1.MainSpec"),
						},
					},
					"maxHeap": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxHeap is the min/max heap value to pass to the JVM. The format should be the same as that used for Java's -Xms and -Xmx JVM options. If not set the JVM defaults are used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"jvmArgs": {
						SchemaProps: spec.SchemaProps{
							Description: "JvmArgs specifies the options to pass to the Coherence JVM. The default is to use the G1 collector.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"javaOpts": {
						SchemaProps: spec.SchemaProps{
							Description: "JavaOpts is miscellaneous JVM options to pass to the Coherence store container This options will override the system options computed in the start up script.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Ports specifies additional port mappings for the Pod and additional Services for those ports",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/coherence/v1.NamedPortSpec"),
									},
								},
							},
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Env is additional environment variable mappings that will be passed to the Coherence container in the Pod To specify extra variables add them as name value pairs the same as they would be added to a Pod containers spec, for example these values:\n\nenv:\n  FOO: \"foo-value\"\n  BAR: \"bar-value\"\n\nwill add the environment variable mappings FOO=\"foo-value\" and BAR=\"bar-value\"",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations are free-form yaml that will be added to the store release as annotations Any annotations should be placed BELOW this annotations: key. For example if we wanted to include annotations for Prometheus it would look like this:\n\nannotations:\n  prometheus.io/scrape: \"true\"\n  prometheus.io/port: \"2408\"",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"podManagementPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "PodManagementPolicy sets the podManagementPolicy value for the Coherence cluster StatefulSet.  The default value is Parallel, to cause Pods to be started and stopped in parallel, which can be useful for faster cluster start-up in certain scenarios such as testing but could cause data loss if multiple Pods are stopped in parallel.  This can be changed to OrderedReady which causes Pods to start and stop in sequence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"revisionHistoryLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "RevisionHistoryLimit is the number of deployment revision K8s keeps after rolling upgrades. The default value if not set is 3.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"persistence": {
						SchemaProps: spec.SchemaProps{
							Description: "Persistence values configure the on-disc data persistence settings. The bool Enabled enables or disabled on disc persistence of data.",
							Ref:         ref("./pkg/apis/coherence/v1.PersistentStorageSpec"),
						},
					},
					"snapshot": {
						SchemaProps: spec.SchemaProps{
							Description: "Snapshot values configure the on-disc persistence data snapshot (backup) settings. The bool Enabled enables or disabled a different location for persistence snapshot data. If set to false then snapshot files will be written to the same volume configured for persistence data in the Persistence section.",
							Ref:         ref("./pkg/apis/coherence/v1.PersistentStorageSpec"),
						},
					},
					"management": {
						SchemaProps: spec.SchemaProps{
							Description: "Management configures Coherence management over REST\n  Note: Coherence management over REST will be available in 12.2.1.4.",
							Ref:         ref("./pkg/apis/coherence/v1.PortSpecWithSSL"),
						},
					},
					"metrics": {
						SchemaProps: spec.SchemaProps{
							Description: "Metrics configures Coherence metrics publishing\n  Note: Coherence metrics publishing will be available in 12.2.1.4.",
							Ref:         ref("./pkg/apis/coherence/v1.PortSpecWithSSL"),
						},
					},
					"jmx": {
						SchemaProps: spec.SchemaProps{
							Description: "JMX defines the values used to enable and configure a separate set of cluster members\n  that will act as MBean server members and expose a JMX port via a dedicated service.\n  The JMX port exposed will be using the JMXMP transport as RMI does not work properly in containers.",
							Ref:         ref("./pkg/apis/coherence/v1.JMXSpec"),
						},
					},
					"volumes": {
						SchemaProps: spec.SchemaProps{
							Description: "Volumes defines extra volume mappings that will be added to the Coherence Pod.\n  The content of this yaml should match the normal k8s volumes section of a Pod definition\n  as described in https://kubernetes.io/docs/concepts/storage/volumes/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"volumeClaimTemplates": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeClaimTemplates defines extra PVC mappings that will be added to the Coherence Pod.\n  The content of this yaml should match the normal k8s volumeClaimTemplates section of a Pod definition\n  as described in https://kubernetes.io/docs/concepts/storage/persistent-volumes/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.PersistentVolumeClaim"),
									},
								},
							},
						},
					},
					"volumeMounts": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeMounts defines extra volume mounts to map to the additional volumes or PVCs declared above\n  in store.volumes and store.volumeClaimTemplates",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"curlTimeout": {
						SchemaProps: spec.SchemaProps{
							Description: "The timeout in seconds used by curl when requesting site and rack info.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.JMXSpec", "./pkg/apis/coherence/v1.LoggingSpec", "./pkg/apis/coherence/v1.MainSpec", "./pkg/apis/coherence/v1.NamedPortSpec", "./pkg/apis/coherence/v1.PersistentStorageSpec", "./pkg/apis/coherence/v1.PortSpecWithSSL", "./pkg/apis/coherence/v1.ReadinessProbeSpec", "k8s.io/api/core/v1.PersistentVolumeClaim", "k8s.io/api/core/v1.Volume", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema_pkg_apis_coherence_v1_CoherenceRole(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CoherenceRole is the Schema for the coherenceroles API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/coherence/v1.CoherenceRoleSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/coherence/v1.CoherenceRoleStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.CoherenceRoleSpec", "./pkg/apis/coherence/v1.CoherenceRoleStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_coherence_v1_CoherenceRoleSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CoherenceRoleSpec defines a role in a Coherence cluster. A role is one or more Pods that perform the same functionality, for example storage members.",
				Properties: map[string]spec.Schema{
					"role": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of this role. This value will be used to set the Coherence role property for all members of this role",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The desired number of cluster members of this role. This is a pointer to distinguish between explicit zero and not specified. Default value is 3.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"images": {
						SchemaProps: spec.SchemaProps{
							Description: "Details of the Docker images used in the role",
							Ref:         ref("./pkg/apis/coherence/v1.Images"),
						},
					},
					"storageEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "A boolean flag indicating whether members of this role are storage enabled. This value will set the corresponding coherence.distributed.localstorage System property. If not specified the default value is true. This flag is also used to configure the ScalingPolicy value if a value is not specified. If the StorageEnabled field is not specified or is true the scaling will be safe, if StorageEnabled is set to false scaling will be parallel.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"scalingPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "ScalingPolicy describes how the replicas of the cluster role will be scaled. The default if not specified is based upon the value of the StorageEnabled field. If StorageEnabled field is not specified or is true the default scaling will be safe, if StorageEnabled is set to false the default scaling will be parallel.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readinessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "The readiness probe config to be used for the Pods in this role. ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/",
							Ref:         ref("./pkg/apis/coherence/v1.ReadinessProbeSpec"),
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "The extra labels to add to the all of the Pods in this roles. Labels here will add to or override those defined for the cluster. More info: http://kubernetes.io/docs/user-guide/labels",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"cacheConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "CacheConfig is the name of the cache configuration file to use",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pofConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "PofConfig is the name of the POF configuration file to use when using POF serializer",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"overrideConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "OverrideConfig is name of the Coherence operational configuration override file, the default is tangosol-coherence-override.xml",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logging": {
						SchemaProps: spec.SchemaProps{
							Description: "Logging allows configuration of Coherence and java util logging.",
							Ref:         ref("./pkg/apis/coherence/v1.LoggingSpec"),
						},
					},
					"main": {
						SchemaProps: spec.SchemaProps{
							Description: "Main allows specification of Coherence container main class.",
							Ref:         ref("./pkg/apis/coherence/v1.MainSpec"),
						},
					},
					"maxHeap": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxHeap is the min/max heap value to pass to the JVM. The format should be the same as that used for Java's -Xms and -Xmx JVM options. If not set the JVM defaults are used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"jvmArgs": {
						SchemaProps: spec.SchemaProps{
							Description: "JvmArgs specifies the options to pass to the Coherence JVM. The default is to use the G1 collector.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"javaOpts": {
						SchemaProps: spec.SchemaProps{
							Description: "JavaOpts is miscellaneous JVM options to pass to the Coherence store container This options will override the system options computed in the start up script.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Ports specifies additional port mappings for the Pod and additional Services for those ports",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/coherence/v1.NamedPortSpec"),
									},
								},
							},
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Env is additional environment variable mappings that will be passed to the Coherence container in the Pod To specify extra variables add them as name value pairs the same as they would be added to a Pod containers spec, for example these values:\n\nenv:\n  FOO: \"foo-value\"\n  BAR: \"bar-value\"\n\nwill add the environment variable mappings FOO=\"foo-value\" and BAR=\"bar-value\"",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations are free-form yaml that will be added to the store release as annotations Any annotations should be placed BELOW this annotations: key. For example if we wanted to include annotations for Prometheus it would look like this:\n\nannotations:\n  prometheus.io/scrape: \"true\"\n  prometheus.io/port: \"2408\"",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"podManagementPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "PodManagementPolicy sets the podManagementPolicy value for the Coherence cluster StatefulSet.  The default value is Parallel, to cause Pods to be started and stopped in parallel, which can be useful for faster cluster start-up in certain scenarios such as testing but could cause data loss if multiple Pods are stopped in parallel.  This can be changed to OrderedReady which causes Pods to start and stop in sequence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"revisionHistoryLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "RevisionHistoryLimit is the number of deployment revision K8s keeps after rolling upgrades. The default value if not set is 3.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"persistence": {
						SchemaProps: spec.SchemaProps{
							Description: "Persistence values configure the on-disc data persistence settings. The bool Enabled enables or disabled on disc persistence of data.",
							Ref:         ref("./pkg/apis/coherence/v1.PersistentStorageSpec"),
						},
					},
					"snapshot": {
						SchemaProps: spec.SchemaProps{
							Description: "Snapshot values configure the on-disc persistence data snapshot (backup) settings. The bool Enabled enables or disabled a different location for persistence snapshot data. If set to false then snapshot files will be written to the same volume configured for persistence data in the Persistence section.",
							Ref:         ref("./pkg/apis/coherence/v1.PersistentStorageSpec"),
						},
					},
					"management": {
						SchemaProps: spec.SchemaProps{
							Description: "Management configures Coherence management over REST\n  Note: Coherence management over REST will be available in 12.2.1.4.",
							Ref:         ref("./pkg/apis/coherence/v1.PortSpecWithSSL"),
						},
					},
					"metrics": {
						SchemaProps: spec.SchemaProps{
							Description: "Metrics configures Coherence metrics publishing\n  Note: Coherence metrics publishing will be available in 12.2.1.4.",
							Ref:         ref("./pkg/apis/coherence/v1.PortSpecWithSSL"),
						},
					},
					"jmx": {
						SchemaProps: spec.SchemaProps{
							Description: "JMX defines the values used to enable and configure a separate set of cluster members\n  that will act as MBean server members and expose a JMX port via a dedicated service.\n  The JMX port exposed will be using the JMXMP transport as RMI does not work properly in containers.",
							Ref:         ref("./pkg/apis/coherence/v1.JMXSpec"),
						},
					},
					"volumes": {
						SchemaProps: spec.SchemaProps{
							Description: "Volumes defines extra volume mappings that will be added to the Coherence Pod.\n  The content of this yaml should match the normal k8s volumes section of a Pod definition\n  as described in https://kubernetes.io/docs/concepts/storage/volumes/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"volumeClaimTemplates": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeClaimTemplates defines extra PVC mappings that will be added to the Coherence Pod.\n  The content of this yaml should match the normal k8s volumeClaimTemplates section of a Pod definition\n  as described in https://kubernetes.io/docs/concepts/storage/persistent-volumes/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.PersistentVolumeClaim"),
									},
								},
							},
						},
					},
					"volumeMounts": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeMounts defines extra volume mounts to map to the additional volumes or PVCs declared above\n  in store.volumes and store.volumeClaimTemplates",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Description: "Pod scheduling values: Affinity, NodeSelector, Tolerations Affinity controls Pod scheduling preferences.\n  ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity",
							Ref:         ref("k8s.io/api/core/v1.Affinity"),
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is the Node labels for pod assignment\n  ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"tolerations": {
						SchemaProps: spec.SchemaProps{
							Description: "Tolerations is for nodes that have taints on them.\n  Useful if you want to dedicate nodes to just run the coherence container\nFor example:\n  tolerations:\n  - key: \"key\"\n    operator: \"Equal\"\n    value: \"value\"\n    effect: \"NoSchedule\"\n\n  ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources is the optional resource requests and limits for the containers\n ref: http://kubernetes.io/docs/user-guide/compute-resources/\n\nBy default the cpu requests is set to zero and the cpu limit set to 32. This is because it appears that K8s defaults cpu to one and since Java 10 the JVM now correctly picks up cgroup cpu limits then the JVM will only see one cpu. By setting resources.requests.cpu=0 and resources.limits.cpu=32 it ensures that the JVM will see the either the number of cpus on the host if this is <= 32 or the JVM will see 32 cpus if the host has > 32 cpus. The limit is set to zero so that there is no hard-limit applied.\n\nNo default memory limits are applied.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"statusHA": {
						SchemaProps: spec.SchemaProps{
							Description: "The handler to use to determine whether a role is Status HA. If not set the default handler will be used. In most use-cases the default handler would suffice but in advanced use-cases where the application code has a different concept of Status HA to just checking Coherence services then a different handler may be specified.",
							Ref:         ref("./pkg/apis/coherence/v1.StatusHAHandler"),
						},
					},
					"curlTimeout": {
						SchemaProps: spec.SchemaProps{
							Description: "The timeout in seconds used by curl when requesting site and rack info.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.Images", "./pkg/apis/coherence/v1.JMXSpec", "./pkg/apis/coherence/v1.LoggingSpec", "./pkg/apis/coherence/v1.MainSpec", "./pkg/apis/coherence/v1.NamedPortSpec", "./pkg/apis/coherence/v1.PersistentStorageSpec", "./pkg/apis/coherence/v1.PortSpecWithSSL", "./pkg/apis/coherence/v1.ReadinessProbeSpec", "./pkg/apis/coherence/v1.StatusHAHandler", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.PersistentVolumeClaim", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Toleration", "k8s.io/api/core/v1.Volume", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema_pkg_apis_coherence_v1_CoherenceRoleStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CoherenceRoleStatus defines the observed state of CoherenceRole",
				Properties: map[string]spec.Schema{
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "The current status.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas is the desired size of the Coherence cluster.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"currentReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "CurrentReplicas is the current size of the Coherence cluster.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"readyReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "ReadyReplicas is the number of Pods created by the StatefulSet.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"selector": {
						SchemaProps: spec.SchemaProps{
							Description: "label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"replicas", "currentReplicas", "readyReplicas"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_coherence_v1_FluentdApplicationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FluentdImageSpec defines the settings for the fluentd application",
				Properties: map[string]spec.Schema{
					"configFile": {
						SchemaProps: spec.SchemaProps{
							Description: "The fluentd configuration file configuring source for application log.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Description: "This value should be source.tag from fluentd.application.configFile.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_coherence_v1_FluentdImageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FluentdImageSpec defines the settings for the fluentd image",
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Image pull policy. One of Always, Never, IfNotPresent. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"application": {
						SchemaProps: spec.SchemaProps{
							Description: "The fluentd application configuration",
							Ref:         ref("./pkg/apis/coherence/v1.FluentdApplicationSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.FluentdApplicationSpec"},
	}
}

func schema_pkg_apis_coherence_v1_ImageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CoherenceInternalImageSpec defines the settings for a Docker image",
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Image pull policy. One of Always, Never, IfNotPresent. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_coherence_v1_Images(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Images defines the different Docker images used in the role",
				Properties: map[string]spec.Schema{
					"coherence": {
						SchemaProps: spec.SchemaProps{
							Description: "CoherenceImage is the details of the Coherence image to be used",
							Ref:         ref("./pkg/apis/coherence/v1.ImageSpec"),
						},
					},
					"coherenceUtils": {
						SchemaProps: spec.SchemaProps{
							Description: "CoherenceUtils is the details of the Coherence utilities image to be used",
							Ref:         ref("./pkg/apis/coherence/v1.ImageSpec"),
						},
					},
					"userArtifacts": {
						SchemaProps: spec.SchemaProps{
							Description: "UserArtifacts configures the image containing jar files and configuration files that are added to the Coherence JVM's classpath.",
							Ref:         ref("./pkg/apis/coherence/v1.UserArtifactsImageSpec"),
						},
					},
					"fluentd": {
						SchemaProps: spec.SchemaProps{
							Description: "Fluentd defines the settings for the fluentd image",
							Ref:         ref("./pkg/apis/coherence/v1.FluentdImageSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.FluentdImageSpec", "./pkg/apis/coherence/v1.ImageSpec", "./pkg/apis/coherence/v1.UserArtifactsImageSpec"},
	}
}

func schema_pkg_apis_coherence_v1_JMXSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "----- JMXSpec struct ----------------------------------------------------- JMXSpec defines the values used to enable and configure a separate set of cluster members\n  that will act as MBean server members and expose a JMX port via a dedicated service.\n  The JMX port exposed will be using the JMXMP transport as RMI does not work properly in containers.",
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled enables or disables running the MBean server nodes.\n  If not set the default is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas is the number of MBean server nodes to run.\n  If not set the default is one.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"maxHeap": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxHeap is the min/max heap value to pass to the MBean server JVM.\n  The format should be the same as that used for Java's -Xms and -Xmx JVM options.\n  If not set the JVM defaults are used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"service": {
						SchemaProps: spec.SchemaProps{
							Description: "Service groups the values used to configure the management service The default service external port is 9099.",
							Ref:         ref("./pkg/apis/coherence/v1.ServiceSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.ServiceSpec"},
	}
}

func schema_pkg_apis_coherence_v1_LoggingSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "----- LoggingSpec struct ------------------------------------------------- LoggingSpec defines the settings for the Coherence Pod logging",
				Properties: map[string]spec.Schema{
					"level": {
						SchemaProps: spec.SchemaProps{
							Description: "The default being 5 (info level).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"configFile": {
						SchemaProps: spec.SchemaProps{
							Description: "ConfigFile allows the location of the Java util logging configuration file to be overridden.\n If this value is not set the logging.properties file embedded in this chart will be used.\n If this value is set the configuration will be located by trying the following locations in order:\n   1. If store.logging.configMapName is set then the config map will be mounted as a volume and the logging\n        properties file will be located as a file location relative to the ConfigMap volume mount point.\n   2. If userArtifacts.imageName is set then using this value as a file name relative to the location of the\n        configuration files directory in the user artifacts image.\n   3. Using this value as an absolute file name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configMapName": {
						SchemaProps: spec.SchemaProps{
							Description: "ConfigMapName allows a config map to be mounted as a volume containing the logging\n configuration file to use.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fluentdEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Controls whether or not log capture via a Fluentd sidecar container to an EFK stack is enabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_coherence_v1_MainSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "----- MainSpec struct ---------------------------------------------------- MainSpec defines the specification of Coherence container main class.",
				Properties: map[string]spec.Schema{
					"class": {
						SchemaProps: spec.SchemaProps{
							Description: "Class is the Coherence container main class.  The default value is\n  com.tangosol.net.DefaultCacheServer.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"arguments": {
						SchemaProps: spec.SchemaProps{
							Description: "Arguments is the optional arguments for Coherence container main class.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_coherence_v1_NamedPortSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "----- NamedPortSpec struct ---------------------------------------------------- NamedPortSpec defines a named port for a Coherence component",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name specifies the name of th port.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Port specifies the port used.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "Protocol for container port. Must be UDP or TCP. Defaults to \"TCP\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"service": {
						SchemaProps: spec.SchemaProps{
							Description: "Service specifies the service used to expose the port.",
							Ref:         ref("./pkg/apis/coherence/v1.ServiceSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.ServiceSpec"},
	}
}

func schema_pkg_apis_coherence_v1_PersistentStorageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "----- PersistentStorageSpec struct --------------------------------------- PersistenceStorageSpec defines the persistence settings for the Coherence",
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"persistentVolumeClaim": {
						SchemaProps: spec.SchemaProps{
							Description: "PersistentVolumeClaim allows the configuration of a normal k8s persistent volume claim for persistence data.",
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimSpec"),
						},
					},
					"volume": {
						SchemaProps: spec.SchemaProps{
							Description: "Volume allows the configuration of a normal k8s volume mapping for persistence data instead of a persistent volume claim. If a value is defined for store.persistence.volume then no PVC will be created and persistence data will instead be written to this volume. It is up to the deployer to understand the consequences of this and how the guarantees given when using PVCs differ to the storage guarantees for the particular volume type configured here.",
							Ref:         ref("k8s.io/api/core/v1.Volume"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PersistentVolumeClaimSpec", "k8s.io/api/core/v1.Volume"},
	}
}

func schema_pkg_apis_coherence_v1_PortSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "----- PortSpec struct ---------------------------------------------------- PortSpec defines the port settings for a Coherence component",
				Properties: map[string]spec.Schema{
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Port specifies the port used.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "Protocol for container port. Must be UDP or TCP. Defaults to \"TCP\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"service": {
						SchemaProps: spec.SchemaProps{
							Description: "Service specifies the service used to expose the port.",
							Ref:         ref("./pkg/apis/coherence/v1.ServiceSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.ServiceSpec"},
	}
}

func schema_pkg_apis_coherence_v1_PortSpecWithSSL(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "----- PortSpecWithSSL struct ---------------------------------------------------- PortSpecWithSSL defines a port with SSL settings for a Coherence component",
				Properties: map[string]spec.Schema{
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Port specifies the port used.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "Protocol for container port. Must be UDP or TCP. Defaults to \"TCP\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"service": {
						SchemaProps: spec.SchemaProps{
							Description: "Service specifies the service used to expose the port.",
							Ref:         ref("./pkg/apis/coherence/v1.ServiceSpec"),
						},
					},
					"ssl": {
						SchemaProps: spec.SchemaProps{
							Description: "SSL configures SSL settings for a Coherence component",
							Ref:         ref("./pkg/apis/coherence/v1.SSLSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/coherence/v1.SSLSpec", "./pkg/apis/coherence/v1.ServiceSpec"},
	}
}

func schema_pkg_apis_coherence_v1_ReadinessProbeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReadinessProbeSpec defines the settings for the Coherence Pod readiness probe",
				Properties: map[string]spec.Schema{
					"initialDelaySeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"timeoutSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"periodSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "How often (in seconds) to perform the probe.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"successThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "Minimum consecutive successes for the probe to be considered successful after having failed.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"failureThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "Minimum consecutive failures for the probe to be considered failed after having succeeded.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_coherence_v1_SSLSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "----- SSLSpec struct ----------------------------------------------------- SSLSpec defines the SSL settings for a Coherence component over REST endpoint.",
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled is a boolean flag indicating whether enables or disables SSL on the Coherence management over REST endpoint, the default is false (disabled).",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"secrets": {
						SchemaProps: spec.SchemaProps{
							Description: "Secrets is the name of the k8s secrets containing the Java key stores and password files.\n  This value MUST be provided if SSL is enabled on the Coherence management over ReST endpoint.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keyStore": {
						SchemaProps: spec.SchemaProps{
							Description: "Keystore is the name of the Java key store file in the k8s secret to use as the SSL keystore\n  when configuring component over REST to use SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keyStorePasswordFile": {
						SchemaProps: spec.SchemaProps{
							Description: "KeyStorePasswordFile is the name of the file in the k8s secret containing the keystore\n  password when configuring component over REST to use SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keyPasswordFile": {
						SchemaProps: spec.SchemaProps{
							Description: "KeyStorePasswordFile is the name of the file in the k8s secret containing the key\n  password when configuring component over REST to use SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keyStoreAlgorithm": {
						SchemaProps: spec.SchemaProps{
							Description: "KeyStoreAlgorithm is the name of the keystore algorithm for the keystore in the k8s secret\n  used when configuring component over REST to use SSL. If not set the default is SunX509",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keyStoreProvider": {
						SchemaProps: spec.SchemaProps{
							Description: "KeyStoreProvider is the name of the keystore provider for the keystore in the k8s secret\n  used when configuring component over REST to use SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keyStoreType": {
						SchemaProps: spec.SchemaProps{
							Description: "KeyStoreType is the name of the Java keystore type for the keystore in the k8s secret used\n  when configuring component over REST to use SSL. If not set the default is JKS.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"trustStore": {
						SchemaProps: spec.SchemaProps{
							Description: "TrustStore is the name of the Java trust store file in the k8s secret to use as the SSL\n  trust store when configuring component over REST to use SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"trustStorePasswordFile": {
						SchemaProps: spec.SchemaProps{
							Description: "TrustStorePasswordFile is the name of the file in the k8s secret containing the trust store\n  password when configuring component over REST to use SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"trustStoreAlgorithm": {
						SchemaProps: spec.SchemaProps{
							Description: "TrustStoreAlgorithm is the name of the keystore algorithm for the trust store in the k8s\n  secret used when configuring component over REST to use SSL.  If not set the default is SunX509.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"trustStoreProvider": {
						SchemaProps: spec.SchemaProps{
							Description: "TrustStoreProvider is the name of the keystore provider for the trust store in the k8s\n  secret used when configuring component over REST to use SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"trustStoreType": {
						SchemaProps: spec.SchemaProps{
							Description: "TrustStoreType is the name of the Java keystore type for the trust store in the k8s secret\n  used when configuring component over REST to use SSL. If not set the default is JKS.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"requireClientCert": {
						SchemaProps: spec.SchemaProps{
							Description: "RequireClientCert is a boolean flag indicating whether the client certificate will be\n  authenticated by the server (two-way SSL) when configuring component over REST to use SSL.\n  If not set the default is false",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_coherence_v1_ServiceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "----- ServiceSpec struct ------------------------------------------------- ServiceSpec defines the settings for a Service",
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled controls whether to create the service yaml or not",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional name to use to override the generated service name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The service port value",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type is the K8s service type (typically ClusterIP or LoadBalancer) The default is \"ClusterIP\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"loadBalancerIP": {
						SchemaProps: spec.SchemaProps{
							Description: "LoadBalancerIP is the IP address of the load balancer",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations is free form yaml that will be added to the service annotations",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"sessionAffinity": {
						SchemaProps: spec.SchemaProps{
							Description: "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"loadBalancerSourceRanges": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"externalName": {
						SchemaProps: spec.SchemaProps{
							Description: "externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"externalTrafficPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"healthCheckNodePort": {
						SchemaProps: spec.SchemaProps{
							Description: "healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"publishNotReadyAddresses": {
						SchemaProps: spec.SchemaProps{
							Description: "publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"sessionAffinityConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "sessionAffinityConfig contains the configurations of session affinity.",
							Ref:         ref("k8s.io/api/core/v1.SessionAffinityConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SessionAffinityConfig"},
	}
}

func schema_pkg_apis_coherence_v1_StatusHAHandler(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StatusHAHandler is the handler that will be used to determine how to check for StatusHA in a CoherenceRole. StatusHA checking is primarily used during scaling of a role, a role must be in a safe Status HA state before scaling takes place. If StatusHA handler is disabled for a role (by specifically setting Enabled to false then no check will take place and a role will be assumed to be safe).",
				Properties: map[string]spec.Schema{
					"exec": {
						SchemaProps: spec.SchemaProps{
							Description: "One and only one of the following should be specified. Exec specifies the action to take.",
							Ref:         ref("k8s.io/api/core/v1.ExecAction"),
						},
					},
					"httpGet": {
						SchemaProps: spec.SchemaProps{
							Description: "HTTPGet specifies the http request to perform.",
							Ref:         ref("k8s.io/api/core/v1.HTTPGetAction"),
						},
					},
					"tcpSocket": {
						SchemaProps: spec.SchemaProps{
							Description: "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported",
							Ref:         ref("k8s.io/api/core/v1.TCPSocketAction"),
						},
					},
					"timeoutSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of seconds after which the handler times out (only applies to http and tcp handlers). Defaults to 1 second. Minimum value is 1.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional flag to enable or disable the StatusHA check. The default value if not set is true.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ExecAction", "k8s.io/api/core/v1.HTTPGetAction", "k8s.io/api/core/v1.TCPSocketAction"},
	}
}

func schema_pkg_apis_coherence_v1_UserArtifactsImageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UserArtifactsImageSpec defines the settings for the user artifacts image",
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Image pull policy. One of Always, Never, IfNotPresent. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"libDir": {
						SchemaProps: spec.SchemaProps{
							Description: "The folder in the custom artifacts Docker image containing jar files to be added to the classpath of the Coherence container. If not set the libDir is \"/files/lib\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configDir": {
						SchemaProps: spec.SchemaProps{
							Description: "The folder in the custom artifacts Docker image containing configuration files to be added to the classpath of the Coherence container. If not set the configDir is \"/files/conf\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}
